import numpy as np
import matplotlib.pyplot as plt
import sys
import os
import glob

def parse_flux_file(filename):
    """
    Parses the flux file generated by the DOTB code.
    """
    print(f"--- Parsing file: {filename} ---")
    
    cellx_mid = []
    celly_mid = []
    fluxes = {}
    
    current_phi_name = None
    current_phi_data = []

    try:
        with open(filename, 'r') as f:
            for line in f:
                line = line.strip()
                
                # Skip comments and empty lines
                if line.startswith('%') or not line:
                    continue
                
                parts = line.split()
                keyword = parts[0]
                
                if keyword == 'cellx':
                    cellx_mid = [float(x) for x in parts[1:]]
                
                elif keyword == 'celly':
                    celly_mid = [float(y) for y in parts[1:]]
                
                
                elif keyword.startswith('phi'):
                    # We are starting a new flux group.
                    # First, save the previous group's data if it exists.
                    if current_phi_name and current_phi_data:
                        fluxes[current_phi_name] = np.array(current_phi_data)
                    
                    # Start new group
                    current_phi_name = keyword
                    current_phi_data = []
                elif keyword.startswith('fiss_den'):
                    break
                else:
                    # This must be flux data
                    if current_phi_name:
                        row = [float(val) for val in parts]
                        current_phi_data.append(row)

        # Save the last flux group after loop finishes
        if current_phi_name and current_phi_data:
            fluxes[current_phi_name] = np.array(current_phi_data)

        if not cellx_mid or not celly_mid or not fluxes:
            raise ValueError("File was parsed, but cell coordinates or flux data are missing.")

        print(f"Parsed {len(cellx_mid)} x-cells and {len(celly_mid)} y-cells.")
        print(f"Found {len(fluxes)} flux groups: {list(fluxes.keys())}")

        # Data in file is (Ny, Nx). Let's transpose all flux data
        # so it's (Nx, Ny) for easier plotting logic.
        # C++ wrote flux[g][i][j] (i=x, j=y)
        # The print loop was for j (rows), for i (cols)
        # So the file matrix is M[j][i].
        # np.array(current_phi_data) reads it as (Ny, Nx) or (j, i)
        # pcolormesh(X, Y, Z) wants Z with shape (Ny, Nx)
        # X, Y = np.meshgrid(cellx_mid, celly_mid)
        # X has shape (Ny, Nx)
        # Y has shape (Ny, Nx)
        # So, no transpose is needed! The read data is already (Ny, Nx).
        
        return cellx_mid, celly_mid, fluxes

    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
        return None, None, None, None
    except Exception as e:
        print(f"Error parsing file: {e}")
        return None, None, None, None

def plot_fluxes(x_mid, y_mid, fluxes_dict, basename="flux_plot"):
    """
    Plots all flux groups as heatmaps, centered on cell midpoints.
    """
    num_groups = len(fluxes_dict)
    if num_groups == 0:
        print("No flux data to plot.")
        return

    # Sort by group name (phi1, phi2, ...)
    sorted_groups = sorted(fluxes_dict.items(), key=lambda item: int(item[0].replace('phi', '')))

    # Create subplots
    # Try to make a squarish layout
    cols = int(np.ceil(np.sqrt(num_groups)))
    rows = int(np.ceil(num_groups / cols))
    
    fig, axes = plt.subplots(rows, cols, figsize=(5 * cols, 4 * rows), squeeze=False)
    axes = axes.flatten() # Make it a 1D array for easy iteration

    print(f"--- Plotting {num_groups} groups in a {rows}x{cols} grid ---")
    
    # Create meshgrid for coordinates
    # X, Y will have shape (Ny, Nx)
    X, Y = np.meshgrid(x_mid, y_mid)

    for i, (group_name, flux_data) in enumerate(sorted_groups):
        ax = axes[i]
        
        # flux_data is (Ny, Nx)
        if flux_data.shape[0] != len(y_mid) or flux_data.shape[1] != len(x_mid):
            print(f"Warning: Mismatch for {group_name}. Flux shape {flux_data.shape} vs. Midpoints (y={len(y_mid)}, x={len(x_mid)})")
            # Try transposing
            if flux_data.T.shape[0] == len(y_mid) or flux_data.T.shape[1] == len(x_mid):
                flux_data = flux_data.T
                print("  > Transposed data to match grid.")
            else:
                print(f"  > Skipping {group_name} due to shape mismatch.")
                continue

        # Use shading='nearest' to center the color block on the X, Y coordinate
        im = ax.pcolormesh(X, Y, flux_data, shading='nearest', cmap='viridis')
        
        ax.set_title(group_name)
        ax.set_xlabel('X coordinate (cm)')
        ax.set_ylabel('Y coordinate (cm)')
        ax.set_aspect('equal')
        fig.colorbar(im, ax=ax, label='Scalar Flux (arb. units)')

    # Hide any unused subplots
    for j in range(num_groups, len(axes)):
        axes[j].axis('off')

    plt.tight_layout()
    
    savename = f"{basename}_flux.png"
    plt.savefig(savename, dpi=600)
    print(f"Successfully saved plot to {savename}")
    
    # Show the plot
    plt.show()


if __name__ == "__main__":
    if len(sys.argv) > 1:
        filename = sys.argv[1]
    else:
        print("Usage: python plot_flux.py [filename]")
        print("No filename provided. Searching for 'flux*' in current directory...")
        # Find any file starting with 'flux' and ending with ''
        found_files = glob.glob('*.flux')
        if not found_files:
            print("Error: No 'flux*' file found. Exiting.")
            sys.exit(1)
        
        # Use the first one found
        filename = found_files[0]
        print(f"Found and using: {filename}")

    if not os.path.exists(filename):
        print(f"Error: File not found at '{filename}'")
        sys.exit(1)
        
    x_mid, y_mid, fluxes = parse_flux_file(filename)
    
    if fluxes:
        # Create a base name for the output .png
        basename = os.path.basename(filename)
        basename = os.path.splitext(basename)[0]
        plot_fluxes(x_mid, y_mid, fluxes, basename)
    else:
        print("Could not plot. No data was successfully parsed.")