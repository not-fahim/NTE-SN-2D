#include "plotting.hpp"
void write_matlab_flux_script(const std::vector<std::vector<std::vector<double>>>& flux, const geometry_class& geometry, const std::string& problem_name)
{
    // Sanitize the problem_name for the filename
    std::string sanitized_name;
    for (char c : problem_name) {
        if (std::isalnum(c)) {
            sanitized_name += c; // Keep letters and numbers
        } else {
            sanitized_name += '_'; // Convert all other symbols to an underscore
        }
    }

    // Construct filename using an underscore as the separator
    std::string filename = "flux_" + sanitized_name + ".m";
    std::ofstream matlab_file(filename);

    if (!matlab_file.is_open()) {
        std::cerr << "Error: Could not open MATLAB script file " << filename << std::endl;
        return;
    }

    // ... (the rest of the function that writes the MATLAB code is the same) ...
    
    matlab_file << "%% MATLAB script to plot scalar flux in a tiled layout\n";
    matlab_file << "% Generated by the C++ transport code\n\n";
    matlab_file << "clear all; close all; clc;\n\n";

    matlab_file << "% Mesh Coordinates\n";
    matlab_file << "x = [";
    for (const auto& val : geometry.x_i) matlab_file << val << " ";
    matlab_file << "];\n";
    matlab_file << "y = [";
    for (const auto& val : geometry.y_j) matlab_file << val << " ";
    matlab_file << "];\n\n";
    matlab_file << "[X, Y] = meshgrid(x, y);\n\n";

    matlab_file << "figure('Name', 'Scalar Flux Distribution', 'NumberTitle', 'off');\n";

    int groups = geometry.groups;
    int rows = (groups <= 3) ? 1 : 2;
    int cols = (groups + rows - 1) / rows; 
    matlab_file << "t = tiledlayout(" << rows << ", " << cols << ", 'TileSpacing', 'compact');\n\n";
    
    for (int g = 0; g < groups; ++g) {
        matlab_file << "% --- Data and Plot for Group " << g + 1 << " ---\n";
        
        matlab_file << "flux_g" << g + 1 << " = [\n";
        for (int i = 0; i < geometry.Nx; ++i) {
            for (int j = 0; j < geometry.Ny; ++j) {
                matlab_file << flux[g][i][j] << " ";
            }
            matlab_file << ";\n";
        }
        matlab_file << "];\n\n";

        matlab_file << "nexttile;\n";
        matlab_file << "surf(X, Y, flux_g" << g + 1 << "');\n";
        matlab_file << "title('Group " << g + 1 << "');\n";
        matlab_file << "view(2);\n";
        matlab_file << "shading interp;\n";
        matlab_file << "axis equal tight;\n";
        matlab_file << "colorbar;\n";
    }

    matlab_file << "\n% Add shared labels and title\n";
    matlab_file << "xlabel(t, 'X position (cm)');\n";
    matlab_file << "ylabel(t, 'Y position (cm)');\n";
    matlab_file << "title(t, 'Scalar Flux Distribution');\n";
    
    matlab_file.close();
    std::cout << "\nSuccessfully wrote MATLAB script with tiled plots to " << filename << std::endl;
}

// New function to write a Python script for plotting flux
void write_python_notebook_script(const std::vector<std::vector<std::vector<double>>>& flux, const geometry_class& geometry, const std::string& problem_name)
{
    // Sanitize the problem_name for the filename
    std::string sanitized_name;
    for (char c : problem_name) {
        if (std::isalnum(c)) {
            sanitized_name += c;
        } else {
            sanitized_name += '_'; // Use underscore for Python/Jupyter
        }
    }

    std::string filename = "flux_" + sanitized_name + ".py";
    std::ofstream python_file(filename);

    if (!python_file.is_open()) {
        std::cerr << "Error: Could not open Python script file " << filename << std::endl;
        return;
    }

    python_file << "#!/usr/bin/env python\n";
    python_file << "# -*- coding: utf-8 -*-\n";
    python_file << "# Python script to plot scalar flux\n";
    python_file << "# Generated by the C++ transport code\n\n";

    python_file << "import numpy as np\n";
    python_file << "import matplotlib.pyplot as plt\n\n";


    python_file << "# Mesh Coordinates\n";
    python_file << "x = np.array([";
    for (const auto& val : geometry.x_i) python_file << val << ", ";
    python_file << "])\n";

    python_file << "y = np.array([";
    for (const auto& val : geometry.y_j) python_file << val << ", ";
    python_file << "])\n\n";


    python_file << "X, Y = np.meshgrid(x, y)\n\n";


    int groups = geometry.groups;
    int rows = (groups <= 3) ? 1 : 2;
    int cols = (groups + rows - 1) / rows;
    python_file << "# Create a figure with a tiled layout\n";
    if (geometry.groups>1) 
    {
        python_file << "fig, axs = plt.subplots(" << rows << ", " << cols << ", figsize=(12, 6), constrained_layout=True)\n";
        python_file << "axs = axs.flatten()\n\n";

        // Loop through each energy group
        for (int g = 0; g < groups; ++g) {
            python_file << "# --- Data and Plot for Group " << g + 1 << " ---\n";

            python_file << "flux_g" << g + 1 << " = np.array([\n";
            for (int i = 0; i < geometry.Nx; ++i) {
                python_file << "    [";
                for (int j = 0; j < geometry.Ny; ++j) {
                    python_file << flux[g][i][j] << ", ";
                }
                python_file << "],\n";
            }
            python_file << "])\n\n";

            // Generate the plot in the corresponding subplot
            python_file << "# Create the plot for this group\n";
            python_file << "im = axs[" << g << "].pcolormesh(X, Y, flux_g" << g + 1 << ".T, shading='nearest')\n";
            python_file << "axs[" << g << "].set_title('Group " << g + 1 << "')\n";
            python_file << "axs[" << g << "].axis('equal')\n";
            python_file << "fig.colorbar(im, ax=axs[" << g << "])\n\n";
        }
       
        // Add a main title for the entire figure
        python_file << "# Add a main title and show the plot\n";
        python_file << "fig.suptitle('Scalar Flux Distribution', fontsize=16)\n";
        python_file << "plt.show()\n";
    }
    else
    {
        python_file << "# --- Data and Plot for Group 1 ---\n";
        

        python_file << "flux_g" << 0 + 1 << " = np.array([\n";
        for (int i = 0; i < geometry.Nx; ++i) {
            python_file << "    [";
            for (int j = 0; j < geometry.Ny; ++j) {
                python_file << flux[0][i][j] << ", ";
            }
            python_file << "],\n";
        }
        python_file << "])\n\n";

        // Generate the plot in the corresponding subplot
        python_file << "# Create the plot for this group\n";
        python_file << "axs = plt.pcolormesh(X, Y, flux_g1.T, shading='nearest')\n";
        python_file << "plt.title('Group 1')\n";
        python_file << "plt.colorbar()\n";
        python_file << "plt.show()\n";
    }   


    python_file.close();
    std::cout << "\nSuccessfully wrote Python script with plots to " << filename << std::endl;
}
